# Create a variable `hometown` that stores the city in which you were born
hometown <- Mountain View, California
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Mountain View, California"
# Assign your name to the variable `my_name`
my_height <- "Michael Bantle"
# Assign your height (in inches) to a variable `my_height`
my_height <- 73
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- $300
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- "$300"
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies*puppy_price
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies*puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost>1000
1250
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
100000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/puppies
max_puppies
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/puppy_price
max_puppies
total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- round(1000/puppy_price)
max_puppies
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
source('~/Desktop/INFO201/ch5-r-intro/exercise-1/exercise.R', echo=TRUE)
install.packages("stringr")
# Create a variable `my_name` that contains your name
my_name <- "Michael Bantle"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
name_length
# Print the number of letters in your name
name_length
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste0(my_name, "is programming!")
now_doing
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste0(my_name , "is programming!")
now_doing
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name , "is programming!")
now_doing
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name , "is programming!",)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name , "is programming!")
now_doing
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 11
fav_2 <- 7
?sqrt
?gsub
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- paste0("I like to eat apples and bananas")
lyric
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Michael"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60*24
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60*24
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60*24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24*365
hours_in_a_year
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
more_minutes_than_hours
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
}
make_introduction(Michael, 20)
lyric
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1,13)
intro
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <-
nchar(lyric)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <-
nchar(lyric)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <-
num <- nchar(lyric)
num
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15,32)
fruits
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
fruits_e
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
fruits_o
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste0(intro, fruits_e)
lyric_e
lyric_e
intro
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
lyric_e
intro
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1,13)
intro
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
lyric_e
make_introduction <- function(name, age) {
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(sentence)
}
make_introduction(Michael, 20)
name <- "Michael"
age <- 20
make_introduction <- function(name, age) {
name <- "Michael"
age <- 20
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(sentence)
}
make_introduction(Michael, 20)
make_introduction <- function("name", age) {
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(sentence)
}
make_introduction(Michael, 20)
make_introduction <- function(name, age) {
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(sentence)
}
make_introd
make_introduction <- function(name, age) {
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(sentence)
}
make_introduction(Michael, 20)
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.",)
make_introduction <- function(name, age) {
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.",)
return(sentence)
}
make_introduction(Michael, 20)
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.", )
return(sentence)
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.", )
return(sentence)
}
make_introduction(Michael, 20)
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.", )
return(sentence)
}
make_introduction(Michael, 20)
make_introduction("Michael", 20)
make_introduction <- function(name, age) {
sentence <- paste0("Hello, my name is", name, "and I'm", age, "years old.", )
return(sentence)
}
make_introduction(Michael, 20)
source('~/Desktop/INFO201/a2-core-skills-michaelbantle/assignment.R', echo=TRUE)
make_introduction <- function(name, age) {
sentence <- paste0("Hello, my name is", name, "and I'm", age, "years old.", )
return(sentence)
}
make_introduction(Michael, 20)
make_introduction <- function(name, age) {
sentence <- paste0("Hello, my name is", name, "and I'm", age, "years old.")
return(sentence)
}
make_introduction(Michael, 20)
MakeIntroduction <- function(name, age) {
sentence <- paste0("Hello, my name is ",  name, " and I'm ", age, " years old.")
return (sentence)
}
MakeIntroduction(Michael, 20)
make_introduction <- function(name, age) {
name <- my_name
age <- my_age
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(sentence)
}
make_introduction(Michael, 20)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
sentence <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(sentence)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Michael", "Jake", "Lindsy")
names
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
n
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n+1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <-10:1
m
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <-seq(10, 1)
m
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, .1)
x_range
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
sin_wave
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- 21:30
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21:30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
eleventh
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
some_numbers
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(1, 100, 2)
even
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
even
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
test <- all(even %% 2 == 0)
test
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
employees
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries <- runif(100, min = 40000, max = 50000)
random_salaries
